snippet jmt1 "should work with primitives"
  #[test]
  fn should_work_with_primitives() {
      assert_eq!(json!(null), Json::Null);
      assert_eq!(json!(true), Json::Boolean(true));
      assert_eq!(json!(123.0), Json::Number(123.0));
      assert_eq!(json!(123), Json::Number(123.0));
      assert_eq!(json!("Hello"), Json::String("Hello".into()));
  }

snippet jmt2 "should work with arrays of primitives"
  #[test]
  fn should_work_with_arrays_of_primitives() {
      assert_eq!(
          json!([1, 2, "Hello"]),
          Json::Array(vec![
              Json::Number(1.0),
              Json::Number(2.0),
              Json::String("Hello".to_string()),
          ])
      );
  }

snippet jmt3 "should work with objects"
  #[test]
  fn should_work_with_objects() {
      assert_eq!(
          json!({ "a": "Hello", "b": 123 }),
          Json::Object(HashMap::from_iter([
              ("a".into(), Json::String("Hello".into())),
              ("b".into(), Json::Number(123.0))
          ]))
      );
  }

snippet jmt4 "should work with arrays of objects"
  #[test]
  fn should_work_with_arrays_of_objects() {
      assert_eq!(
          json!([{"a": 1}, {"b": 2}]),
          Json::Array(vec![
              Json::Object(HashMap::from_iter([("a".into(), Json::Number(1.0))])),
              Json::Object(HashMap::from_iter([("b".into(), Json::Number(2.0))])),
          ])
      );
  }
